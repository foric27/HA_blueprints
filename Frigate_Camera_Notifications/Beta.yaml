blueprint:
  name: Уведомления Frigate (0.14.0.3h)
  author: SgtBatten
  homeassistant:
    min_version: 2024.11.0
  description: |
    ## Уведомления Frigate

    Высоко настраиваемый шаблон уведомлений для уведомлений камер Frigate.

    ### Требования к версиям ПО
      - Минимальная версия Home Assistant: 2024.11
      - Минимальная версия Frigate: 0.14.0
      - Минимальная версия интеграции Frigate: 5.7.0
        - **Примечание:** "Включить неаутентифицированный прокси событий уведомлений" должно быть отмечено во время настройки
      - MQTT-брокер, подключенный к Home Assistant и Frigate.
      - Минимальная версия iOS: 15.0

    ### Обязательные параметры конфигурации:
      - Камеры Frigate
      - Мобильное устройство (с запущенным приложением HA Companion)

    ### Функции:
      - Легкий выбор сущностей камер или мобильного устройства с помощью выпадающего меню.
      - Настройка нескольких камер в одной автоматизации. 

      Полный список функций смотрите в [репозитории GitHub][1]

    [1]: https://github.com/SgtBatten/HA_blueprints/blob/main/Frigate_Camera_Notifications

    ## Поддержка
    Перейдите на https://github.com/SgtBatten/HA_blueprints для сообщений об ошибках, запросов новых функций или получения поддержки с вашей конфигурацией.

  domain: automation
  source_url: https://github.com/SgtBatten/HA_blueprints/blob/main/Frigate_Camera_Notifications/Beta.yaml
  input:
    camera:
      name: Камеры Frigate
      description: |
        Выберите камеры, которые будут запускать уведомления. 
        Если вы не видите камеры в выпадающем списке, убедитесь, что интеграция Frigate установлена.
        Для более эффективной настройки уведомлений может потребоваться создать одну автоматизацию на камеру.
      selector:
        entity:
          filter:
            integration: frigate
            domain: camera
          multiple: true
    notify_device:
      name: Мобильное устройство
      description: Выберите устройство, на котором запущено официальное приложение Home Assistant, для получения уведомлений. Если вы хотите уведомлять группу устройств и/или Android/Fire TV, используйте поле ниже для переопределения этого выбора. Это будет игнорироваться в этом случае, но все равно требуется.
      default: false
      selector:
        device:
          filter:
            integration: mobile_app
    notify_group:
      name: Группа уведомлений или Android/Fire TV (Опционально)
      description: |
        Имя группы или отдельного ТВ для отправки уведомлений.
        Если установлено, это переопределит отдельные устройства выше.

        Примечание: Если группа содержит как мобильные устройства, так и ТВ, ТВ не отобразит снимок, если "Уведомления на ТВ" не установлено в true. Однако это остановит получение миниатюр на Android-телефонах.
      default: ""
    base_url:
      name: Базовый URL (Опционально)
      description: |
        Внешний URL для вашего экземпляра Home Assistant.
        Рекомендуется для iOS и требуется для Android/Fire TV.
        Должен включать схему, т.е. http:// или https://
        Примеры: http://192.168.1.25:8123   https://homeassistant.mydomain.com
      default: ""
    mqtt_topic:
      name: Тема MQTT (Расширенно)
      description: Тема MQTT, в которую Frigate отправляет сообщения о проверках.
      default: frigate/reviews
    client_id:
      name: ID клиента (Опционально-Расширенно)
      description: Используется для поддержки нескольких экземпляров Frigate. Оставьте пустым, если не знаете, что делать.
      default: ""
    telegram:
      name: |
        # Конфигурация Telegram
      description: Это специфические опции для Telegram.
      icon: mdi:phone-outline
      collapsed: true
      input:
        telegram_base_url:
          name: Базовый URL Telegram (Опционально)
          description: |
            Внутренний URL для вашего экземпляра Home Assistant.
            Используется только для интеграции Telegram (для загрузки медиа). Полезно, когда базовый URL указывает на прокси-экземпляр,
            который может быть недоступен из вашего Home Assistant. Если не установлено, Telegram будет использовать базовый URL.
            Должен включать схему, т.е. http:// или https://
            Примеры: http://192.168.1.25:8123
          default: ""
        notify_telegram_chat_id:
          name: ID чата Telegram (Опционально)
          description: |
            ID чата для отправки уведомлений Telegram.
            Если установлено, это переопределит отдельные устройства и группы выше. Примечание: ТВ (ниже) должно быть false.
            Базовый URL должен начинаться с https, поскольку кнопки URL в Telegram работают только с https.
          default: ""
    notification_customisations:
      name: |
        # Настройки уведомлений
      description: Это опции настройки уведомлений
      icon: mdi:bell
      collapsed: true
      input:
        title:
          name: Заголовок уведомления (Опционально)
          description: Заголовок уведомления.
          default: ""
        message:
          name: Сообщение уведомления
          description: |
            Сообщение уведомления.
            Вы можете использовать переменные, такие как {{camera_name}} и {{label}}
            Например: {{ label }} {{ ' был' if type == 'end' else '' }} обнаружен на камере {{ camera_name }}.

          default: "{{ label }} {{ 'был обнаружен' }} на камере {{ camera_name }}."
          selector:
            select:
              options:
                - label: "По умолчанию:   Например, Человек был обнаружен на камере Side."
                  value: "{{ label }} {{ 'был обнаружен' }} на камере {{ camera_name }}."
                - label: "Короткое:     Например, Человек обнаружен - Side"
                  value: "{{ label }} обнаружен - {{ camera_name }}"
                - label: "Короткое с меткой времени ЧЧ:ММ"
                  value: "{{ label }} обнаружен - {{ camera_name }} в {{event['after']['start_time']|timestamp_custom('%H:%M')}}"
                - label: "Длинное:      Например, Человек был обнаружен на камере Side в driveway."
                  value: "{{ label }}{{ ' был' if type == 'end' else '' }} обнаружен на камере {{ camera_name }}{{ ' в ' if after_zones|length}}{{ after_zones | join(', ') | replace('_', ' ' ) | title }}."
                - label: "Длинное с меткой времени ЧЧ:ММ"
                  value: "{{ label }}{{ ' был' if type == 'end' else '' }} обнаружен на камере {{ camera_name }}{{ ' в ' if after_zones|length}}{{ after_zones | join(', ') | replace('_', ' ' ) | title }} в {{event['after']['start_time']|timestamp_custom('%H:%M')}}."
              custom_value: true
        update_sub_label:
          name: Обновление подметок (Расширенно)
          description: |
            Обновить заголовок и/или сообщение с именем совпадающего лица и запустить обновление уведомления.

            Требует настройки распознавания лиц через Double Take (Расширенно). Требует, чтобы Заголовок и/или Сообщение содержали переменную {{ label }}
          default: true
          selector:
            boolean:
        subtitle:
          name: Подзаголовок
          description: Вторичный заголовок, который вы можете использовать в уведомлениях.
          default: ""
        critical:
          name: Критическое уведомление (Опционально)
          description: |
            Отправить как критическое уведомление на мобильное устройство. Это игнорирует режимы молчания/вибрации.
            Вы можете ограничить критические уведомления определенными временами с помощью шаблона (предоставлены примеры, но вы можете ввести свой, пока он выводит true или false)
          default: "false"
          selector:
            select:
              options:
                - "false"
                - "true"
                - "{{'false' if now().hour in [8,9,10,11,12,13,14,15,16,17,18] else 'true'}}"
                - "{{'true' if is_state('sun.sun', 'above_horizon') else 'false' }}"
                - "{{ event['after']['top_score'] |float(0) > 0.8 }}"
              custom_value: true
        interruption_level:
          name: Уровень прерывания (iOS)
          description: |
            Установить уровень прерывания на устройствах iOS. Может быть шаблонировано.
            Должно приводить к "passive", "active", "time-sensitive" или "critical". См. https://companion.home-assistant.io/docs/notifications/notifications-basic#interruption-level для определений
            Опция Критическое выше переопределит эту настройку, когда true
          default: "active"
          selector:
            select:
              options:
                - "passive"
                - "active"
                - "time-sensitive"
                - "critical"
                - "{{'critical' if now().hour in [8,9,10,11,12,13,14,15,16,17,18] else 'active'}}"
                - "{{'time-sensitive' if is_state('sun.sun', 'above_horizon') else 'passive' }}"
        tts:
          name: Использовать TTS для обхода режимов молчания/dnd на конкретных телефонах.
          description: |
            Некоторые телефоны (в частности, линия Samsung Galaxy) отключают возможность использования `alarm_stream` для обхода текущих настроек звука. Эта опция позволяет TTS объявлять оповещение вместо этого, что обходит настройки звука.
          default: false
          selector:
            boolean:
        tts_helper:
          name: Сущность для хранения ID, уже оповещенных TTS
          description: |
            Чтобы TTS учитывал настройки alert_once, создайте текстовый помощник (/config/helpers), который будет использоваться для хранения ID любых TTS-оповещений, которые были отправлены. Установите максимальное количество символов в 250 для хранения последних 25 ID оповещений. Затем выберите его здесь
          default: ""
          selector:
            entity:
              filter:
                integration: input_text
        alert_once:
          name: Оповещать один раз (Опционально)
          description: Только первое уведомление для каждого события будет воспроизводить звук. Обновления, включая новые миниатюры, будут молчаливыми. Пользователи iOS, использующие Критические уведомления выше, все равно услышат стандартные критические звуки для обновлений.
          default: false
          selector:
            boolean:
        attachment:
          name: Начальное вложение
          description: |
            Выберите, какое изображение или GIF прикрепить к начальному уведомлению.

            Примечание: ТВ всегда получат снимок.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg"
          selector:
            select:
              options:
                # format=android преобразует в соотношение 2:1 для отображения на мобильном.
                - label: Миниатюра
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg"
                - label: Снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Снимок с ограничивающей рамкой
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1"
                - label: Обрезанный снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?crop=1"
                - label: Обрезанный снимок с ограничивающей рамкой
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&crop=1"
                - label: GIF проверки
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif"
                  # это покажет GIF, связанный с первым объектом, обнаруженным Frigate
                - label: GIF события объекта 1
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/event_preview.gif"
                - label: Миниатюра (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg?format=android"
                - label: Снимок (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?format=android"
                - label: Снимок с ограничивающей рамкой (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&format=android"
                - label: Обрезанный снимок (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?crop=1&format=android"
                - label: Обрезанный снимок с ограничивающей рамкой (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&crop=1&format=android"
              mode: dropdown
        attachment_2:
          name: Последующее вложение (Опционально)
          description: |
            Выберите, какое изображение или GIF прикрепить к уведомлению для любых обновлений. Рекомендуется включить Финальное обновление
            Установите в None, чтобы продолжить использовать Начальное вложение для обновлений. 

            Примечание: ТВ получат снимок, если выбран GIF.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg"
          selector:
            select:
              options:
                - label: None
                  value: ""
                # format=android преобразует в соотношение 2:1 для отображения на мобильном.
                - label: Миниатюра
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg"
                - label: Снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Снимок с ограничивающей рамкой
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1"
                - label: Обрезанный снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?crop=1"
                - label: Обрезанный снимок с ограничивающей рамкой
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&crop=1"
                - label: GIF проверки
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif"
                  # это покажет GIF, связанный с первым объектом, обнаруженным Frigate
                - label: GIF события объекта 1
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/event_preview.gif"
                - label: Миниатюра (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg?format=android"
                - label: Снимок (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?format=android"
                - label: Снимок с ограничивающей рамкой (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&format=android"
                - label: Обрезанный снимок (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?crop=1&format=android"
                - label: Обрезанный снимок с ограничивающей рамкой (2:1)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg?bbox=1&crop=1&format=android"
              mode: dropdown
        video:
          name: Видео (Опционально)
          description: Опционально прикрепить клип к уведомлению, который заменит вложение выше, если доступен.
          default: ""
          selector:
            select:
              options:
                - label: None
                  value: ""
                - label: GIF проверки
                  # по сравнению с вложениями выше, добавляем format=ts, чтобы HA интерпретировал GIF как видео, иначе это не сработает.
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif?format=ts"
                - label: GIF события объекта 1
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/event_preview.gif?format=ts"
                - label: Клип mp4
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Клип m3u8 (IOS)
                  # требует интеграцию Frigate 5.7.0+
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/master.m3u8"
              mode: dropdown
        final_update:
          name: Финальное обновление (Опционально)
          description: Обновить уведомление в конце события. Используется для обеспечения отправки полного видео или GIF. Настройте задержку при необходимости в разделе таймеров (по умолчанию - 5 секунд).
          default: false
          selector:
            boolean:
        color:
          name: Цвет уведомления - Только Android и ТВ (Опционально)
          description: |
            Установить цвет уведомления на вашем мобильном устройстве Android или ТВ. 
            ТВ поддерживает только `grey`, `black`, `indigo`, `green`, `red`, `cyan`, `teal`, `amber` или `pink`.
          default: "#03a9f4"
          selector:
            select:
              options:
                - label: Основной (Steelblue)
                  value: "#03a9f4"
                - label: Красный
                  value: "#f44336"
                - label: Розовый
                  value: "#e91e63"
                - label: Фиолетовый
                  value: "#926bc7"
                - label: Темно-фиолетовый
                  value: "#6e41ab"
                - label: Индиго
                  value: "#3f51b5"
                - label: Синий
                  value: "#2196f3"
                - label: Светло-синий
                  value: "#03a9f4"
                - label: Голубой
                  value: "#00bcd4"
                - label: Бирюзовый
                  value: "#009688"
                - label: Зеленый
                  value: "#4caf50"
                - label: Светло-зеленый
                  value: "#8bc34a"
                - label: Лайм
                  value: "#cddc39"
                - label: Желтый
                  value: "#ffeb3b"
                - label: Янтарный
                  value: "#ffc107"
                - label: Оранжевый
                  value: "#ff9800"
                - label: Темно-оранжевый
                  value: "#ff5722"
                - label: Коричневый
                  value: "#795548"
                - label: Светло-серый
                  value: "#bdbdbd"
                - label: Серый
                  value: "#9e9e9e"
                - label: Темно-серый
                  value: "#606060"
                - label: Сине-серый
                  value: "#607d8b"
                - label: Черный
                  value: "#000000"
                - label: Белый
                  value: "#ffffff"
        icon:
          name: Иконка уведомления (Опционально)
          description: Изменить иконку, отображаемую в уведомлении. Вы можете ввести одну иконку или создать шаблон, как в примере из выпадающего списка. Должно включать 'mdi:' в имени иконки.
          default: mdi:homeassistant
          selector:
            select:
              options:
                - mdi:homeassistant
                - mdi:cctv
                - "mdi:{{'account-outline' if label == 'Person' else 'dog' if label == 'Dog' else 'cat' if label == 'Cat' else 'car' if label == 'Car' else 'home-assistant'}}"
              custom_value: true
        group:
          name: Группа
          description: Имя группы, которое определит, будут ли уведомления группироваться на вашем мобильном устройстве. Если вы хотите группировать уведомления по камере, убедитесь, что оно содержит {{camera}}
          default: "{{camera}}-frigate-notification"
        tag:
          name: Тег
          description: Тег используется для идентификации отдельных уведомлений, чтобы заменять их обновленными изображениями/текстом. По умолчанию - ID события 
          default: "{{id}}"
        sound:
          name: Звук уведомления - Только iOS (Опционально)
          description: Вы можете указать звуковой файл на вашем устройстве, который будет воспроизводиться для уведомлений. Вам нужно импортировать звуковой файл в Home Assistant.
          default: default
          selector:
            select:
              options:
                - default
                - none
              custom_value: true
        volume:
          name: Громкость звука - Только iOS (Опционально)
          description: Вы можете указать уровень громкости от 0 до 100
          default: 100
          selector:
            number:
              max: 100
              min: 0
              unit_of_measurement: "%"
              step: 1
              mode: slider
        ios_live_view:
          name: Сущность живого просмотра - Только iOS (Опционально)
          description: Прикрепить живой просмотр из выбранной сущности к уведомлению для устройств iOS.
          default: ""
          selector:
            entity:
              filter:
                domain: camera
        android_auto:
          name: Android Auto
          description: Показывать уведомление в Android Auto, если принимающее устройство подключено.
          default: false
          selector:
            boolean:
        sticky:
          name: Липкое - Только Android (Опционально)
          description: |
            Когда включено, уведомление останется активным на устройстве после нажатия на него и останется там до очистки.
          default: false
          selector:
            boolean:
        channel:
          name: Канал уведомлений - Только Android (Опционально)
          description: Создать новый канал для уведомлений, чтобы разрешить пользовательские звуки уведомлений, шаблоны вибрации и переопределение режима Не беспокоить. Настраивается непосредственно на устройстве.
          default: ""
    filters:
      name: |
        # Фильтры
      description: Эти помогают ограничить, когда или о чем вы уведомляетесь.
      icon: mdi:filter
      collapsed: true
      input:
        review_severity:
          name: Тип события
          description: |
            Укажите классификацию событий Frigate, о которых уведомлять.
          default:
            - alert
            - detection
          selector:
            select:
              options:
                - label: Оповещения
                  value: alert
                - label: Обнаружения
                  value: detection
              multiple: true
        master_condition:
          name: Главное условие (Опционально)
          description: Установите условия, которые остановят выполнение автоматизации, если результат false. Другие тесты не будут проводиться позже. Это выключатель на инициации.
          default: []
          selector:
            condition: {}
        zone_filter:
          name: Фильтр зон вкл/выкл (Опционально)
          description: Включить, чтобы уведомлять только если объект вошел в зону, перечисленную ниже.
          default: false
          selector:
            boolean:
        zones:
          name: Требуемые зоны (Опционально - Включено выше)
          description: |
            Введите имя одной зоны за раз. Оно должно быть в нижнем регистре и включать подчеркивания, как в вашей конфигурации Frigate.
            По умолчанию любая зона приемлема. Если вы хотите, чтобы ВСЕ перечисленные зоны были введены перед получением уведомления, включите мульти-переключатель ниже.
          default: []
          selector:
            select:
              options:
                - examples
                - porch
                - front_door
                - side
                - garden
              multiple: true
              custom_value: true
        zone_multi:
          name: Мульти-зона (Опционально)
          description: Требовать, чтобы все зоны, указанные выше, были введены, вместо любой перечисленной зоны. Фильтр зон должен быть также включен.
          default: false
          selector:
            boolean:
        zone_order_enforced:
          name: Принудительный порядок зон (Опционально)
          description: |
            В сочетании с Мульти-зоной требует, чтобы зоны вводились в том же порядке, что и их требование. 
            Полезно для оповещения о прибывающих транспортных средствах, игнорируя уходящие, например
          default: false
          selector:
            boolean:
        labels:
          name: Фильтр объектов (Опционально)
          description: Укажите объекты, о которых вы хотите уведомляться. Введите или выберите один объект за раз.
          default: ""
          selector:
            select:
              options:
                - person
                - dog
                - cat
                - car
                - package
                - bird
              multiple: true
              custom_value: true
        presence_filter:
          name: Фильтр присутствия (Опционально)
          description: Уведомлять только если ВСЕ выбранные сущности присутствия не "home".
          default: ""
          selector:
            entity:
              filter:
                domain:
                  - device_tracker
                  - person
                  - group
              multiple: true
        state_filter:
          name: Фильтр состояний вкл/выкл (Опционально)
          description: Включить две настройки Фильтра состояний ниже. Уведомлять только если выбранная сущность в указанных состояниях.
          default: false
          selector:
            boolean:
        state_entity:
          name: Сущность фильтра состояний (Опционально)
          description: Уведомлять только если выбранная сущность в состоянии ниже. Вы должны включить "Фильтр состояний" выше для использования этого.
          default: ""
          selector:
            entity:
        state_filter_states:
          name: Состояния фильтра состояний (Опционально)
          description: Введите состояния, в которых должна быть сущность выше, по одному за раз.
          default: []
          selector:
            select:
              options: []
              multiple: true
              custom_value: true
        disable_times:
          name: Фильтр времени (Опционально)
          description: Предотвращать отправку уведомлений в указанные часы
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: 00:00 - 00:59
                  value: "0"
                - label: 01:00 - 01:59
                  value: "1"
                - label: 02:00 - 02:59
                  value: "2"
                - label: 03:00 - 03:59
                  value: "3"
                - label: 04:00 - 04:59
                  value: "4"
                - label: 05:00 - 05:59
                  value: "5"
                - label: 06:00 - 06:59
                  value: "6"
                - label: 07:00 - 07:59
                  value: "7"
                - label: 08:00 - 08:59
                  value: "8"
                - label: 09:00 - 09:59
                  value: "9"
                - label: 10:00 - 10:59
                  value: "10"
                - label: 11:00 - 11:59
                  value: "11"
                - label: 12:00 - 12:59
                  value: "12"
                - label: 13:00 - 13:59
                  value: "13"
                - label: 14:00 - 14:59
                  value: "14"
                - label: 15:00 - 15:59
                  value: "15"
                - label: 16:00 - 16:59
                  value: "16"
                - label: 17:00 - 17:59
                  value: "17"
                - label: 18:00 - 18:59
                  value: "18"
                - label: 19:00 - 19:59
                  value: "19"
                - label: 20:00 - 20:59
                  value: "20"
                - label: 21:00 - 21:59
                  value: "21"
                - label: 22:00 - 22:59
                  value: "22"
                - label: 23:00 - 23:59
                  value: "23"
        custom_filter:
          name: Пользовательский фильтр (Опционально - Расширенно)
          description: Фильтр, который должен приводить к true или false, но может быть шаблонирован по необходимости. Вам нужно убедиться, что он заключен в соответствующие \"кавычки\" и \{\{скобки\}\}.
          default: true
    timers:
      name: |
        # Таймеры
      description: Это таймеры, которые вы можете настроить
      icon: mdi:gesture-double-tap
      collapsed: true
      input:
        cooldown:
          name: Время восстановления (Опционально)
          description: Задержка перед отправкой другого уведомления для этой камеры после последнего события.
          default: 0
          selector:
            number:
              max: 86400
              min: 0
              unit_of_measurement: seconds
        timeout:
          name: Тайм-аут
          description: Длина времени, в течение которого автоматизация будет ждать обновлений MQTT.
          default: 2
          selector:
            number:
              max: 90
              min: 0
              unit_of_measurement: minutes
        silence_timer:
          name: Заглушить новые уведомления (Опционально)
          description: |
            Как долго приостановить уведомления для этой камеры при запросе как части действия уведомления. 
            Примечание: Перезапуск Home Assistant в период сломает таймер и может отключить автоматизацию
          default: 30
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: minutes
        loiter_timer:
          name: Уведомления о задержке (Опционально)
          description: >
            Отправляет новое уведомление о задержке, если стационарный объект обнаружен дольше,
            чем указанное время. 0 - выкл и не отправит уведомления.
          default: 0
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: seconds
        initial_delay:
          name: Задержка начального уведомления (Опционально)
          description: |
            Как долго задержать первое уведомление для каждого события. Применяется только если все условия выполнены, когда первое событие определено Frigate

            Используйте это, если вы НЕ используете "обновление изображения" и испытываете уведомления без прикрепленных изображений. Начните с малых чисел.
          default: 0
          selector:
            number:
              max: 15
              min: 0
              unit_of_measurement: seconds
        final_delay:
          name: Задержка финального уведомления (Опционально)
          description: |
            Как долго задержать финальное уведомление для каждого события. Применяется только если включено Финальное обновление.
          default: 5
          selector:
            number:
              max: 20
              min: 0
              unit_of_measurement: seconds
    actions:
      name: |
        # Кнопки действий и URL
      description: Это опции кнопок действий и URL
      icon: mdi:gesture-double-tap
      collapsed: true
      input:
        tap_action:
          name: URL действия касания
          description:
            URL для открытия при касании уведомления. Предоставлены некоторые пресеты, вы также можете установить свой, введя в поле.

            Эти опции определяют текст и URL, связанные с тремя кнопками действий внизу уведомления.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: Просмотреть клип
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Просмотреть клип (IOS)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/master.m3u8"
                - label: Просмотреть GIF
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif"
                - label: Просмотреть снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Просмотреть поток
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Открыть Home Assistant (веб)
                  value: "{{base_url}}/lovelace"
                - label: Открыть Home Assistant (приложение)
                  value: /lovelace
                - label: Открыть Frigate
                  value: /ccab4aaf_frigate/ingress
                - label: Открыть Frigate (Полный доступ)
                  value: /ccab4aaf_frigate-fa/ingress
                - label: Открыть Frigate (прокси)
                  value: /ccab4aaf_frigate-proxy/ingress
                - label: Открыть приложение Reolink (Android)
                  value: app://com.mcu.reolink
                - label: None (Android)
                  value: noAction
                - label: История уведомлений (Android)
                  value: settings://notification_history
              custom_value: true
        button_1:
          name: Текст кнопки действия 1
          description: 'Текст, используемый на первой кнопке действия внизу уведомления. Установите URL ниже. (По умолчанию "Просмотреть клип")'
          default: "Просмотреть клип"
        url_1:
          name: URL кнопки действия 1
          description: Настройте, что происходит при нажатии первой кнопки действия. Выберите из преднастроенных опций или введите свой URL.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: Заглушить новые уведомления
                  value: silence-{{ this.entity_id }}
                - label: Просмотреть клип
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Просмотреть клип (IOS)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/master.m3u8"
                - label: Просмотреть GIF
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{review_id}}/review_preview.gif"
                - label: Просмотреть снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Просмотреть поток
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Открыть Home Assistant (веб)
                  value: "{{base_url}}/lovelace"
                - label: Открыть Home Assistant (приложение)
                  value: /lovelace
                - label: Открыть Frigate
                  value: /ccab4aaf_frigate/ingress
                - label: Открыть Frigate (Полный доступ)
                  value: /ccab4aaf_frigate-fa/ingress
                - label: Открыть Frigate (прокси)
                  value: /ccab4aaf_frigate-proxy/ingress
                - label: Открыть приложение Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Пользовательское действие (Ручной запуск)
                  value: custom-{{ this.entity_id }}
              custom_value: true
        icon_1:
          name: Иконка кнопки действия 1 - Только iOS
          description: Настройте иконку на первой кнопке действия. Поддерживается только библиотека iOS SFSymbols, не mdi:icons. Например, sfsymbols:bell
          default: ""
        button_2:
          name: Текст кнопки действия 2
          description: "Текст, используемый на второй кнопке действия внизу уведомления. Установите URL ниже."
          default: "Просмотреть снимок"
        url_2:
          name: URL кнопки действия 2
          description: Настройте, что происходит при нажатии второй кнопки действия. Выберите из преднастроенных опций или введите свой URL.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
          selector:
            select:
              options:
                - label: Заглушить новые уведомления
                  value: silence-{{ this.entity_id }}
                - label: Просмотреть клип
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Просмотреть клип (IOS)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/master.m3u8"
                - label: Просмотреть снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Просмотреть поток
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Открыть Home Assistant (веб)
                  value: "{{base_url}}/lovelace"
                - label: Открыть Home Assistant (приложение)
                  value: /lovelace
                - label: Открыть Frigate
                  value: /ccab4aaf_frigate/ingress
                - label: Открыть Frigate (Полный доступ)
                  value: /ccab4aaf_frigate-fa/ingress
                - label: Открыть Frigate (прокси)
                  value: /ccab4aaf_frigate-proxy/ingress
                - label: Открыть приложение Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Пользовательское действие (Ручной запуск)
                  value: custom-{{ this.entity_id }}
              custom_value: true
        icon_2:
          name: Иконка кнопки действия 2 - Только iOS
          description: Настройте иконку на второй кнопке действия. Поддерживается только библиотека iOS SFSymbols, не mdi:icons. Например, sfsymbols:bell
          default: ""
        button_3:
          name: Текст кнопки действия 3
          description: "Текст, используемый на третьей кнопке действия внизу уведомления. Установите URL ниже."
          default: "Заглушить новые уведомления"
        url_3:
          name: URL кнопки действия 3
          description: Настройте, что происходит при нажатии третьей кнопки действия. Выберите из преднастроенных опций или введите свой URL.
          default: silence-{{ this.entity_id }}
          selector:
            select:
              options:
                - label: Заглушить новые уведомления
                  value: silence-{{ this.entity_id }}
                - label: Просмотреть клип
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: Просмотреть клип (IOS)
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/master.m3u8"
                - label: Просмотреть снимок
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: Просмотреть поток
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Открыть Home Assistant (веб)
                  value: "{{base_url}}/lovelace"
                - label: Открыть Home Assistant (приложение)
                  value: /lovelace
                - label: Открыть Frigate
                  value: /ccab4aaf_frigate/ingress
                - label: Открыть Frigate (Полный доступ)
                  value: /ccab4aaf_frigate-fa/ingress
                - label: Открыть Frigate (прокси)
                  value: /ccab4aaf_frigate-proxy/ingress
                - label: Открыть приложение Reolink (Android)
                  value: app://com.mcu.reolink
                - label: Пользовательское действие (Ручной запуск)
                  value: custom-{{ this.entity_id }}
              custom_value: true
        icon_3:
          name: Иконка кнопки действия 3 - Только iOS
          description: Настройте иконку на третьей кнопке действия. Поддерживается только библиотека iOS SFSymbols, не mdi:icons. Например, sfsymbols:bell
          default: ""
        custom_action_manual:
          name: Пользовательское действие (Ручной запуск)
          description: Настраиваемое действие, которое вы можете запустить с помощью кнопок пользовательского действия в уведомлении. Выберите Пользовательское действие на любой кнопке действия выше.
          selector:
            action: {}
          default: []
        custom_action_auto:
          name: Пользовательское действие (Автозапуск)
          description: Настраиваемое действие, которое запустится на начальном уведомлении (с учетом всех других условий уведомлений).
          selector:
            action: {}
          default: []
        custom_action_auto_multi:
          name: Пользовательское действие (Автозапуск в цикле)
          description: Настраиваемое действие, которое запустится на всех последующих уведомлениях (с учетом всех других условий уведомлений). Если вы хотите, чтобы оно также запускалось на начальном уведомлении, введите его в оба поля ввода.
          selector:
            action: {}
          default: []
    tv_notifications:
      name: |
        # Уведомления на ТВ
      description: Это опции уведомлений на ТВ
      icon: mdi:television
      collapsed: true
      input:
        tv:
          name: Уведомление на ТВ (Опционально)
          description: |
            Установите true, если вы уведомляете Android/Fire TV
            Также может использоваться для приоритета снимков на ТВ над мобильными приложениями Android при уведомлении смешанной группы устройств.
            Базовый URL должен быть установлен

            Настройки ниже только для уведомлений на ТВ
          default: false
          selector:
            boolean:
        tv_position:
          name: Позиция уведомления на ТВ (Опционально)
          description: Установите позицию уведомления на вашем ТВ
          default: center
          selector:
            select:
              mode: dropdown
              options:
                - bottom-right
                - bottom-left
                - top-right
                - top-left
                - center
        tv_size:
          name: Размер уведомления на ТВ (Опционально)
          description: Установите размер уведомления на вашем ТВ.
          default: large
          selector:
            select:
              mode: dropdown
              options:
                - small
                - medium
                - large
                - max
        tv_duration:
          name: Продолжительность уведомления на ТВ (Опционально)
          description: Продолжительность (в секундах), в течение которой уведомление будет отображаться на вашем ТВ.
          default: 10
          selector:
            number:
              max: 300
              min: 0
              unit_of_measurement: seconds
        tv_transparency:
          name: Прозрачность уведомления на ТВ (Опционально)
          description: Установите прозрачность уведомления на вашем ТВ.
          default: 0%
          selector:
            select:
              mode: dropdown
              options:
                - 0%
                - 25%
                - 50%
                - 75%
                - 100%
        tv_interrupt:
          name: Прерывание уведомления на ТВ (Опционально)
          description: "Если true, уведомление интерактивно и может быть отклонено или выбрано для отображения деталей. В зависимости от запущенного приложения (например, Netflix), это может остановить воспроизведение."
          default: false
          selector:
            boolean:
    debug:
      name: |
        # ОТЛАДКА
      description: Это опции отладки
      icon: mdi:bug
      collapsed: true
      input:
        debug:
          name: Отладка
          description: Включить для отправки сообщений отладки в журнал Home Assistant.
          default: false
          selector:
            boolean:
        redacted:
          name: Редактировать базовый URL
          description: Скрывает базовый URL в выводе отладки для удобного обмена. Не скрывает его из других частей трассировки.
          default: true
          selector:
            boolean:
mode: parallel
trigger_variables:
  # severity: !input review_severity
  mqtt_topic: !input mqtt_topic
triggers:
  - trigger: mqtt
    topic: "{{mqtt_topic}}"
    payload: "new"
    value_template: "{{value_json['type']}}"
    id: frigate-event
  - trigger: event
    event_type: mobile_app_notification_action
    event_data:
      action: "silence-{{ this.entity_id }}"
    id: silence
  - trigger: event
    event_type: telegram_callback
    event_data:
      data: "silence-{{ this.entity_id }}"
    id: silence
  - trigger: event
    event_type: mobile_app_notification_action
    event_data:
      action: "custom-{{ this.entity_id}}"
    id: custom
  - trigger: event
    event_type: telegram_callback
    event_data:
      action: "custom-{{ this.entity_id}}"
    id: custom
variables:
  input_camera: !input camera
  input_camera_name: "{{input_camera|expand|map(attribute='attributes.camera_name', default='none')|list}}"
  camera: "{{trigger.payload_json['after']['camera'] if trigger.id == 'frigate-event'}}"
  camera_name: "{{ camera | replace('_', ' ') | title }}"
  input_severity: !input review_severity
  severity: "{{trigger.payload_json['after']['severity'] if trigger.id == 'frigate-event'}}"
  type: "{{trigger.payload_json['type'] if trigger.id == 'frigate-event'}}"
  input_base_url: !input base_url
  base_url: "{{ input_base_url.rstrip('/')}}"
  input_telegram_base_url: !input telegram_base_url
  telegram_base_url: "{{ input_telegram_base_url.rstrip('/') if input_telegram_base_url else base_url }}"
  update_sub_label: !input update_sub_label
  input_client_id: !input client_id
  client_id: "{{input_client_id if not input_client_id else '/' + input_client_id if '/' not in input_client_id else input_client_id }}"
  alert_once: !input alert_once
  final_update: !input final_update
  ios_live_view: !input ios_live_view
  android_auto: !input android_auto
  notify_group: !input notify_group
  notify_group_target: "{{ notify_group | lower | regex_replace('^notify\\.', '') | replace(' ','_') }}"
  telegram_chat_id: !input notify_telegram_chat_id
  telegram: "{{true if (telegram_chat_id | length > 0) else false}}"
  zone_only: !input zone_filter
  input_zones: !input zones
  zones: "{{ input_zones | list | lower }}"
  zone_multi: !input zone_multi
  zone_order_enforced: !input zone_order_enforced
  input_labels: !input labels
  labels: "{{ input_labels | list | lower }}"
  presence_entity: !input presence_filter
  disable_times: !input disable_times
  cooldown: !input cooldown
  timeout: !input timeout
  loitering: false
  loiter_timer: !input loiter_timer
  initial_delay: !input initial_delay
  final_delay: !input final_delay
  fps: "{{ states('sensor.' + camera + '_camera_fps')|int(5) }}"
  state_only: !input state_filter
  input_entity: !input state_entity
  input_states: !input state_filter_states
  states_filter: "{{ input_states | list | lower }}"
  custom_filter: !input custom_filter
  color: !input color
  sound: !input sound
  input_volume: !input volume
  volume: "{{ (1 * input_volume|int(100))/100 }}"
  sticky: !input sticky
  tv: !input tv
  tv_position: !input tv_position
  tv_size: !input tv_size
  tv_duration: !input tv_duration
  tv_transparency: !input tv_transparency
  tv_interrupt: !input tv_interrupt
  debug: !input debug
  redacted: !input redacted
  master_condition: !input master_condition
  # Dynamic Variables per event
  severity_satisfied: "{{input_severity|select('in', severity)|list|length > 0 if trigger.id == 'frigate-event'}}"
  objects: "{{ trigger.payload_json['after']['data']['objects'] if trigger.id == 'frigate-event' }}"
  objects_satisfied: "{{ not labels|length or labels|select('in', objects)|list|length > 0 or ('person-verified' in objects and 'person' in labels) }}"
  initial_home: "{{ presence_entity != '' and presence_entity|expand|selectattr('state','eq','home')|list|length != 0 }}"
  state_satisfied: "{{ not state_only or states(input_entity)|lower in states_filter }}"
  before_zones: "{{ trigger.payload_json['before']['data']['zones'] | list | lower if trigger.id == 'frigate-event' }}"
  after_zones: "{{ trigger.payload_json['after']['data']['zones'] | list | lower if trigger.id == 'frigate-event' }}"
  zone_multi_filter: "{{zone_only and zone_multi and after_zones|length and zones and zones |reject('in', after_zones) |list |length == 0 }}"
conditions:
  condition: or
  conditions:
    - condition: trigger
      id: silence
    - condition: trigger
      id: custom
    - condition: and
      conditions:
        - condition: trigger
          id: frigate-event
        - alias: Соответствие камеры
          condition: template
          value_template: "{{ input_camera_name|select('equalto', camera)|list|length>0 }}"
        - alias: Главное условие
          condition: !input master_condition
        - alias: Время восстановления
          condition: template
          value_template: "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > cooldown }}"
        - alias: Отключенные времена
          condition: template
          value_template: "{{ not disable_times|length or not now().hour in disable_times|map('int')|list }}"
actions:
  - choose:
      - alias: "Заглушить уведомления о новых объектах"
        conditions:
          - condition: trigger
            id: silence
        sequence:
          - action: automation.turn_off
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              stop_actions: false
          - delay:
              minutes: !input silence_timer
          - action: automation.turn_on
            target:
              entity_id: "{{ this.entity_id }}"
      - alias: "Пользовательское действие ручное"
        conditions:
          - condition: trigger
            id: custom
        sequence: !input "custom_action_manual"
      - alias: "Событие Frigate"
        conditions:
          - condition: trigger
            id: "frigate-event"
        sequence:
          - variables:
              event: "{{ trigger.payload_json }}"
              detections: "{{ event['after']['data']['detections'] }}"
              review_id: "{{event['after']['id']}}"
              id: "{{ detections[0] }}"
              objects: "{{ event['after']['data']['objects'] }}"
              sub_labels: "{{ event['after']['data']['sub_labels'] }}"
              label: >-
                {% if update_sub_label %}
                  {% set data = namespace(labels=[]) %} 
                  {% if labels|length %}
                    {% for obj in objects|select('in', labels) %}
                      {% if "-verified" in obj %}
                      {% else %}
                        {% set data.labels = data.labels + [obj] %}
                      {% endif %}
                    {% endfor %} {% set data.labels = data.labels + sub_labels %} 
                    {{ data.labels | unique | list | sort | join(", ") | title }}
                  {% else %}
                    {% for obj in objects %}
                      {% if "-verified" in obj %}
                      {% else %}
                        {% set data.labels = data.labels + [obj] %}
                      {% endif %}
                    {% endfor %} {% set data.labels = data.labels + sub_labels %} 
                    {{ data.labels | unique | list | sort | join(", ") | title }}
                  {% endif %}
                {% else %}
                  {{ objects | list | join(", ") | title }}
                {% endif %}

              # Dynamic Variables per event
              # after_zones: "{{ event['after']['data']['zones'] }}"
              # zone_multi_filter: "{{zone_only and zone_multi and after_zones|length and zones and zones |reject('in', after_zones) |list |length == 0 }}"

              # Zones Variables
              # If no zones defined, or any zones have been entered
              any_zones_entered: "{{ zones | length == 0 or ((zones | select('in', after_zones) | list | length) > 0) }}"
              zone_single_satisfied: "{{ any_zones_entered if zone_only else true}}"

              # If no zones defined, or all zones have been entered
              all_zones_entered: "{{ zones | length == 0 or ((zones | reject('in', after_zones) | list | length) == 0) }}"
              zone_multi_satisfied: "{{ all_zones_entered if zone_only and zone_multi else true}}"

              # Compare the joined strings for equality is the simplest solution, due to both variables being defined in band.
              ordered_zones_match: >
                {% set ns = namespace(intersection=[]) %}
                {% for item in after_zones %}
                    {% if item in zones %}
                        {% set ns.intersection = ns.intersection + [item] %}
                    {% endif %}
                {% endfor %}
                {{ ns.intersection == zones }}
              # Fails fast if prerequisite of zone or zone_multi is false, as they are pre-requisites
              zone_order_satisfied: "{{ (zone_only and zone_multi and ordered_zones_match) if zone_order_enforced else true }}"

              zones_satisfied: "{{zone_single_satisfied and zone_multi_satisfied and zone_order_satisfied}}"
              # Customisation of text
              title: !input title
              message: !input message
              subtitle: !input subtitle
              tap_action: !input tap_action
              button_1: !input button_1
              button_2: !input button_2
              button_3: !input button_3
              url_1: !input url_1
              url_2: !input url_2
              url_3: !input url_3
              icon_1: !input icon_1
              icon_2: !input icon_2
              icon_3: !input icon_3
              # other things that can be templated and might need info from the event
              critical_input: !input critical
              critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
              interruption_level: !input interruption_level
              tts: !input tts
              tts_helper: !input tts_helper
              custom_filter: !input custom_filter
              icon: !input icon
              group: !input group
              tag: !input tag
              channel: !input channel
              attachment: !input attachment
              video: !input video
              custom_action_auto: !input custom_action_auto
          - alias: "Отладка: Начальный вывод"
            choose:
              - conditions:
                  - "{{debug}}"
                sequence:
                  - action: logbook.log
                    data_template:
                      name: Уведомление Frigate
                      message: |
                        ОТЛАДКА: 
                          Информация:
                            FPS: {{fps}}, 
                            ID проверки Frigate: {{review_id}}{{', ID клиента Frigate: ' + client_id if client_id else ''}}, 
                            Обнаружения Frigate: {{detections}}
                            Объекты: {{label}},
                            Подметки: {{sub_labels | join(', ')}}
                          Конфигурация: 
                            Камера(форматированная): {{camera}}({{camera_name}}), 
                            Базовый URL: {{'ЗАРЕДАКТИРОВАНО' if base_url and redacted else base_url}},
                            Критическое: {{critical}}, 
                            TTS: {{tts}} 
                            Помощник TTS: {{tts_helper if tts else 'Н/Д'}},
                            Оповещать один раз: {{alert_once}}, 
                            Финальное обновление (задержка): {{final_update}} ({{final_delay}})с, 
                            Вложение: {{attachment if not redacted or not base_url else attachment |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}
                            Видео: {{video if not redacted or not base_url else video |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}, 
                            URL iOS: {{(video if not redacted or not base_url else video |replace(base_url, 'ЗАРЕДАКТИРОВАНО')) if video|length >0 else attachment if not redacted or not base_url else attachment |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}
                            Цель: {{'группа (ввод/форматированная): ' + notify_group + '/' + notify_group_target + ', ' if notify_group else 'Мобильное устройство'}}, 
                            Время восстановления: {{cooldown}}с, 
                            Начальная задержка: {{initial_delay}}с, 
                            Цвет: {{color}}, 
                            Звук: {{sound}}, 
                            Громкость: {{ iif(sound == 'none', 0, volume) }}
                            Сущность живого просмотра iOS: "{{ios_live_view}}"
                            Android Auto: {{android_auto}}, 
                            Тег: {{ tag }}, 
                            Группа: {{group}}, 
                            Канал: {{channel}} {{' - переопределен alarm_stream' if critical}}, 
                            Липкое: {{sticky}}, 
                            Заголовок: {{title}}, 
                            Сообщение: {{message}},
                            Подзаголовок: {{subtitle}}, 
                            Действие касания: {{tap_action if not redacted or not base_url else tap_action |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}, 
                            Текст/URL/Иконка кнопки действия 1: {{iif(button_1, button_1, 'не установлено')}} ({{url_1 if not redacted or not base_url else url_1 |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}) {{icon_1}}, 
                            Текст/URL/Иконка кнопки действия 2: {{iif(button_2, button_2, 'не установлено')}} ({{url_2 if not redacted or not base_url else url_2 |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}) {{icon_2}}, 
                            Текст/URL/Иконка кнопки действия 3: {{iif(button_3, button_3, 'не установлено')}} ({{url_3 if not redacted or not base_url else url_3 |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}) {{icon_3}}, 
                            Иконка: {{icon}}
                            ТВ: {{ tv }}, 
                              Позиция: {{tv_position}}, 
                              Размер: {{tv_size}}, 
                              Продолжительность: {{tv_duration}}, 
                              Прозрачность: {{tv_transparency}}, 
                              Прерывание ТВ: {{tv_interrupt}}, 
                            Telegram: {{telegram}},
                            ID чата Telegram: {{telegram_chat_id}},
                          Фильтры: 
                            Серьезность:
                              Требуемая серьезность: {{input_severity}},
                              ТЕСТ: {{'ПРОШЕЛ' if severity_satisfied else 'НЕ ПРОШЕЛ'}} - {{severity}}
                            Зоны: 
                              Переключатель фильтра зон вкл: {{zone_only}}, 
                              Переключатель мульти-зон вкл: {{zone_multi}}, 
                              Требуемые зоны: {{input_zones}}, 
                              Переключатель принудительного порядка зон вкл: {{zone_order_enforced}}
                              Введенные зоны: {{after_zones}},
                              ТЕСТ: {{'ПРОШЕЛ' if zones_satisfied else 'НЕ ПРОШЕЛ' }} {{'(Мульти)' if zone_only and zone_multi}} {{'(Принудительный порядок)' if zone_only and zone_multi and zone_order_enforced}}, 
                            Требуемые объекты: 
                              Ввод: {{input_labels}}, 
                              ТЕСТ: {{'ПРОШЕЛ' if objects_satisfied else 'НЕ ПРОШЕЛ'}} - {{objects}}
                            Сущность присутствия (не дома):
                              Сущность: {{presence_entity}}
                              ТЕСТ:  {{'ПРОШЕЛ' if not initial_home else 'НЕ ПРОШЕЛ'}}, 
                            Отключенные времена: {{disable_times}}, 
                            Фильтр состояний: 
                              Переключатель фильтра состояний вкл: {{state_only}}, 
                              Сущность фильтра состояний: {{input_entity}}, 
                              Требуемые состояния: {{input_states}}, 
                              ТЕСТ: {{'ПРОШЕЛ' if state_satisfied else 'НЕ ПРОШЕЛ' }},
                            Пользовательский фильтр: {{custom_filter}}
          - choose:
              - conditions:
                  - alias: Фильтр серьезности
                    condition: template
                    value_template: "{{ severity_satisfied }}"
                  - alias: "Фильтр объектов"
                    condition: template
                    value_template: "{{ objects_satisfied }}"
                  - alias: Фильтр зон
                    condition: template
                    value_template: "{{ zones_satisfied }}"
                  - alias: Фильтр присутствия
                    condition: template
                    value_template: "{{ not initial_home }}"
                  - alias: Фильтр состояний
                    condition: template
                    value_template: "{{ state_satisfied }}"
                  - alias: Пользовательский фильтр
                    condition: template
                    value_template: "{{ custom_filter }}"
                sequence:
                  - alias: "Задержка для изображения"
                    choose:
                      - conditions: "{{initial_delay > 0}}"
                        sequence:
                          - delay:
                              seconds: "{{initial_delay}}"
                  - alias: "Пользовательское действие авто"
                    choose:
                      - conditions: "{{ custom_action_auto |length > 0 }}"
                        sequence: !input "custom_action_auto"
                  - alias: "Отправить уведомление"
                    sequence:
                      - choose:
                          - conditions: "{{ telegram }}"
                            sequence:
                              - action: telegram_bot.send_photo
                                data:
                                  target: "{{telegram_chat_id}}"
                                  caption: "{{message}}"
                                  url: "{{attachment|replace( base_url, telegram_base_url )}}"
                          - conditions: "{{ not notify_group_target }}"
                            sequence:
                              - device_id: !input notify_device
                                domain: mobile_app
                                type: notify
                                title: "{{title}}"
                                message: "{{message}}"
                                data:
                                  tag: "{{ tag }}"
                                  group: "{{ group }}"
                                  color: "{{color}}"
                                  # Android Specific
                                  subject: "{{subtitle}}"
                                  image: "{{attachment}}"
                                  video: "{{video}}"
                                  clickAction: "{{tap_action}}"
                                  ttl: 0
                                  priority: high
                                  notification_icon: "{{icon}}"
                                  sticky: "{{sticky}}"
                                  channel: "{{'alarm_stream' if critical else channel}}"
                                  car_ui: "{{android_auto}}"
                                  # iOS Specific
                                  subtitle: "{{subtitle}}"
                                  url: "{{tap_action}}"
                                  attachment:
                                    url: "{{video if video else attachment }}"
                                    content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                  push:
                                    sound:
                                      name: "{{sound}}"
                                      volume: "{{ iif(sound == 'none', 0, volume) }}"
                                    interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                  entity_id: "{{ios_live_view}}"
                                  # Actions
                                  actions:
                                    - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                      title: "{{button_1}}"
                                      uri: "{{url_1}}"
                                      icon: "{{icon_1}}"
                                      destructive: "{{not '/' in url_1}}"
                                    - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                      title: "{{button_2}}"
                                      uri: "{{url_2}}"
                                      icon: "{{icon_2}}"
                                      destructive: "{{not '/' in url_2}}"
                                    - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                      title: "{{button_3}}"
                                      uri: "{{url_3}}"
                                      icon: "{{icon_3}}"
                                      destructive: "{{not '/' in url_3}}"
                          - conditions: "{{ tv }}"
                            sequence:
                              - action: "notify.{{ notify_group_target }}"
                                data:
                                  title: "{{title}}"
                                  message: "{{message}}"
                                  data:
                                    tag: "{{ tag }}"
                                    group: "{{ group }}"
                                    color: "{{color}}"
                                    # Android Specific
                                    subject: "{{subtitle}}"
                                    clickAction: "{{tap_action}}"
                                    ttl: 0
                                    priority: high
                                    notification_icon: "{{icon}}"
                                    sticky: "{{sticky}}"
                                    channel: "{{'alarm_stream' if critical else channel}}"
                                    car_ui: "{{android_auto}}"
                                    # Android/Fire TV
                                    image:
                                      #только отправлять статичные изображения на ТВ
                                      url: "{{attachment | replace('review_preview.gif','snapshot.jpg') | replace('event_preview.gif','snapshot.jpg')}}"
                                    fontsize: "{{tv_size}}"
                                    position: "{{tv_position}}"
                                    duration: "{{tv_duration}}"
                                    transparency: "{{tv_transparency}}"
                                    interrupt: "{{tv_interrupt}}"
                                    timeout: 30
                                    # iOS Specific
                                    subtitle: "{{subtitle}}"
                                    url: "{{tap_action}}"
                                    attachment:
                                      url: "{{video if video else attachment }}"
                                      content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                    push:
                                      sound:
                                        name: "{{sound}}"
                                        volume: "{{ iif(sound == 'none', 0, volume) }}"
                                      interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                    entity_id: "{{ios_live_view}}"
                                    # Actions
                                    actions:
                                      - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                        title: "{{button_1}}"
                                        uri: "{{url_1}}"
                                        icon: "{{icon_1}}"
                                        destructive: "{{not '/' in url_1}}"
                                      - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                        title: "{{button_2}}"
                                        uri: "{{url_2}}"
                                        icon: "{{icon_2}}"
                                        destructive: "{{not '/' in url_2}}"
                                      - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                        title: "{{button_3}}"
                                        uri: "{{url_3}}"
                                        icon: "{{icon_3}}"
                                        destructive: "{{not '/' in url_3}}"
                        default:
                          - action: "notify.{{ notify_group_target }}"
                            data:
                              title: "{{title}}"
                              message: "{{message}}"
                              data:
                                tag: "{{ tag }}"
                                group: "{{ group }}"
                                color: "{{color}}"
                                # Android Specific
                                subject: "{{subtitle}}"
                                image: "{{attachment}}"
                                video: "{{video}}"
                                clickAction: "{{tap_action}}"
                                ttl: 0
                                priority: high
                                notification_icon: "{{icon}}"
                                sticky: "{{sticky}}"
                                channel: "{{'alarm_stream' if critical else channel}}"
                                car_ui: "{{android_auto}}"
                                # Android/Fire TV
                                subtitle: "{{subtitle}}"
                                fontsize: "{{tv_size}}"
                                position: "{{tv_position}}"
                                duration: "{{tv_duration}}"
                                transparency: "{{tv_transparency}}"
                                interrupt: "{{tv_interrupt}}"
                                # iOS Specific
                                url: "{{tap_action}}"
                                attachment:
                                  url: "{{video if video else attachment }}"
                                  content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                push:
                                  sound:
                                    name: "{{sound}}"
                                    volume: "{{ iif(sound == 'none', 0, volume) }}"
                                  interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                entity_id: "{{ios_live_view}}"
                                # Actions
                                actions:
                                  - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                    title: "{{button_1}}"
                                    uri: "{{url_1}}"
                                    icon: "{{icon_1}}"
                                    destructive: "{{not '/' in url_1}}"
                                  - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                    title: "{{button_2}}"
                                    uri: "{{url_2}}"
                                    icon: "{{icon_2}}"
                                    destructive: "{{not '/' in url_2}}"
                                  - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                    title: "{{button_3}}"
                                    uri: "{{url_3}}"
                                    icon: "{{icon_3}}"
                                    destructive: "{{not '/' in url_3}}"
                      - if: "{{tts and (not tts_helper or not alert_once or (tts_helper and id not in states(tts_helper)))}}"
                        then:
                          sequence:
                            - choose:
                                - conditions: "{{ not notify_group_target }}"
                                  sequence:
                                    - device_id: !input notify_device
                                      domain: mobile_app
                                      type: notify
                                      message: "{{'TTS'}}"
                                      data:
                                        tag: "{{ tag }}{{'-tts'}}"
                                        channel: "{{'alarm_stream' if critical else channel}}"
                                        alert_once: "{{ alert_once }}"
                                        tts_text: "{{message}}"
                              default:
                                - action: "notify.{{ notify_group_target }}"
                                  data:
                                    message: "{{'TTS'}}"
                                    data:
                                      tag: "{{ tag }}{{'-tts'}}"
                                      channel: "{{'alarm_stream' if critical else channel}}"
                                      alert_once: "{{ alert_once }}"
                                      tts_text: "{{message}}"
                            - action: input_text.set_value
                              data:
                                value: |
                                  {% set newIds = id + '|' + states(tts_helper) %}
                                  {{ newIds[:250] }}
                              target:
                                entity_id: "{{tts_helper}}"
          ########################################################
          #################### Цикл для обновлений ##################
          ########################################################
          - repeat:
              sequence:
                - wait_for_trigger:
                    - trigger: mqtt
                      topic: "{{mqtt_topic}}"
                      payload: "{{ review_id }}"
                      value_template: "{{ value_json['after']['id'] }}"
                  timeout:
                    minutes: "{{timeout}}"
                  continue_on_timeout: false
                - variables:
                    # использовать переменную последующего вложения, если установлено
                    attachment_2: !input attachment_2
                    attachment: "{{iif(attachment_2, attachment_2, attachment)}}"

                    event: "{{ wait.trigger.payload_json }}"
                    type: "{{event['type']}}"

                    initial_severity: "{{severity}}"
                    old_objects: "{{objects}}"
                    last_zones: "{{after_zones}}"
                    # Иногда сообщения MQTT пропускаются, поэтому мы сохраняем серьезность, объекты и зоны предыдущей итерации для сравнения с новыми,
                    # вместо сравнения новых before и after, которые могут совпадать несмотря на изменения между сообщениями MQTT

                    severity: "{{event['after']['severity']}}"
                    severity_updated: "{{initial_severity != severity}}"
                    severity_satisfied: "{{((input_severity | select('equalto', severity) | list | length) > 0) }}"

                    objects: "{{ event['after']['data']['objects'] }}"
                    objects_satisfied: "{{ not labels|length or labels|select('in', objects)|list|length > 0 or ('person-verified' in objects and 'person' in labels) }}"
                    #loitering: "{{ loiter_timer and event['before']['motionless_count']/fps/60 < loiter_timer and event['after']['motionless_count']/fps/60 >= loiter_timer }}"
                    home: "{{presence_entity |reject('in', '') |select('is_state', 'home') |list |length != 0 }}"
                    #new_snapshot: "{{ update_thumbnail and event['before']['snapshot']['frame_time'] != event['after']['snapshot']['frame_time'] }}"
                    presence_changed: "{{ presence_entity |reject('in', '') |expand |map(attribute='last_changed') |list |select('gt', as_datetime(event['before']['start_time'])) |list |length != 0 }}"

                    # Zones Variables

                    before_zones: "{{ event['before']['data']['zones'] | list | lower | default([]) }}"
                    after_zones: "{{ event['after']['data']['zones'] | list | lower | default([]) }}"
                    # If no zones defined, or any zones have been entered
                    any_zones_entered: "{{ zones | length == 0 or ((zones | select('in', after_zones) | list | length) > 0) }}"
                    zone_single_satisfied: "{{ any_zones_entered if zone_only else true}}"

                    # If no zones defined, or all zones have been entered
                    all_zones_entered: "{{ zones | length == 0 or ((zones | reject('in', after_zones) | list | length) == 0) }}"
                    zone_multi_satisfied: "{{ all_zones_entered if zone_only and zone_multi else true}}"

                    # Compare the joined strings for equality is the simplest solution, due to both variables being defined in band.
                    ordered_zones_match: >
                      {% set ns = namespace(intersection=[]) %}
                      {% for item in after_zones %}
                          {% if item in zones %}
                              {% set ns.intersection = ns.intersection + [item] %}
                          {% endif %}
                      {% endfor %}
                      {{ ns.intersection == zones }}
                    # Fails fast if prerequisite of zone or zone_multi is false, as they are pre-requisites
                    zone_order_satisfied: "{{ (zone_only and zone_multi and ordered_zones_match) if zone_order_enforced else true }}"

                    zones_satisfied: "{{zone_single_satisfied and zone_multi_satisfied and zone_order_satisfied}}"

                    new_entered_zones: "{{ zones | select('in', after_zones) | list }}"
                    last_entered_zones: "{{ zones | select('in', last_zones) | list }}"
                    entered_new_zones: "{{ not zone_only and after_zones | length > last_zones | length }}"
                    entered_new_filter_zones: "{{ zone_only and zones | length > 0 and (new_entered_zones | length > last_entered_zones | length) }}"

                    # stationary_moved: "{{ event['after']['position_changes'] > event['before']['position_changes'] }}"

                    state_satisfied: "{{ not state_only or states(input_entity)|lower in states_filter }}"

                    before_sub_labels: "{{ sub_labels }}"
                    sub_labels: "{{ event['after']['data']['sub_labels'] | default([]) }}"
                    # оценить подметки из сообщения MQTT.
                    # Если пользователь настроил конкретные объекты, мы исключаем объекты не в этом списке
                    # Иначе мы проходим по всем объектам и заменяем любые верифицированные объекты подметкой
                    label: >-
                      {% if update_sub_label %}
                        {% set data = namespace(labels=[]) %} 
                        {% if labels|length %}
                          {% for obj in objects|select('in', labels) %}
                            {% if "-verified" in obj %}
                            {% else %}
                              {% set data.labels = data.labels + [obj] %}
                            {% endif %}
                          {% endfor %} {% set data.labels = data.labels + sub_labels %} 
                          {{ data.labels | unique | list | sort | join(", ") | title }}
                        {% else %}
                          {% for obj in objects %}
                            {% if "-verified" in obj %}
                            {% else %}
                              {% set data.labels = data.labels + [obj] %}
                            {% endif %}
                          {% endfor %} {% set data.labels = data.labels + sub_labels %} 
                          {{ data.labels | unique | list | sort | join(", ") | title }}
                        {% endif %}
                      {% else %}
                        {{objects | list | join(', ') | title}}
                      {% endif %}
                    # импортировать заголовок и сообщение снова, чтобы захватить любые изменения подметок, объектов или зон.
                    title: !input title
                    message: !input message
                    subtitle: !input subtitle

                    critical_input: !input critical
                    critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
                    interruption_level: !input interruption_level
                    tts: !input tts

                    sub_label_updated: "{{ update_sub_label and sub_labels != before_sub_labels }}"
                    # Если мы фильтруем по зонам, и условия зон выполнены, и добавлена новая зона.
                    zone_updated: "{{ (entered_new_filter_zones and zones_satisfied) or entered_new_zones }}"
                    object_updated: "{{ old_objects | select('in', labels) | list | length  != objects | select('in', labels) | list | length }}"

                    # update используется для определения, должны ли мы воспроизводить звук. Если true, мы должны быть молчаливыми.
                    silent_update: "{{ alert_once or (not presence_changed and not zone_updated and not object_updated and not sub_label_updated) }}"

                    custom_action_auto_multi: !input custom_action_auto_multi
                - alias: "Отладка: Вывод цикла"
                  choose:
                    - conditions:
                        - "{{debug}}"
                      sequence:
                        - action: logbook.log
                          data_template:
                            name: Уведомление Frigate
                            message: |
                              ОТЛАДКА (в цикле):
                                Отправить уведомление: {{custom_filter and not home and zones_satisfied and state_satisfied and objects_satisfied and severity_satisfied and ((final_update and type == 'end') or (severity_updated or presence_changed or zone_updated or object_updated or sub_label_updated)) }}
                                Информация:
                                  Подметка: {{sub_labels}},
                                  Изображение: "{{attachment if not redacted or not base_url else attachment |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}"
                                  Заголовок: {{title}}
                                  Сообщение: {{message}}
                                  Звук iOS: {{'Критический' if critical else 'отключен оповещением один раз' if alert_once else 'Молчаливый' if silent_update else sound}},
                                  Уровень прерывания iOS: {{interruption_level}}
                                  Звук Android: {{'отключен оповещением один раз' if alert_once else 'включен'}},
                                  URL iOS: "{{(video if not redacted or not base_url else video |replace(base_url, 'ЗАРЕДАКТИРОВАНО')) if video else attachment if not redacted or not base_url else attachment |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}", 
                                  Видео: "{{video if not redacted or not base_url else video |replace(base_url, 'ЗАРЕДАКТИРОВАНО')}}", 

                                  Критическое: {{critical}},
                                  TTS: {{tts}}
                                Триггеры:
                                  Новый снимок: False (не функционально с проверками)
                                  Серьезность изменилась: {{severity_updated}},
                                  Присутствие изменилось: {{presence_changed}},
                                  Объект изменился: {{object_updated}},
                                  Зоны изменились: {{'True' if entered_new_filter_zones and zones_satisfied else 'True - фильтр зон отключен' if entered_new_zones and not zone_only else 'True - Критерии фильтра не выполнены' if entered_new_zones else 'False'}},
                                  Подметка изменилась: {{ sub_label_updated }}{{' - Отключено' if not update_sub_label}},
                                  Финальное обновление: {{final_update and type == 'end'}}
                                Условия:
                                  Фильтры:
                                    Серьезность:
                                      Требуемая серьезность: {{input_severity}}
                                      ТЕСТ: {{'ПРОШЕЛ' if severity_satisfied else 'НЕ ПРОШЕЛ'}} - {{severity}}, 
                                    Зоны:
                                      Переключатель фильтра зон вкл: {{zone_only}},
                                      Переключатель мульти-зон вкл: {{zone_multi}},
                                      Требуемые зоны: {{input_zones}},
                                      Переключатель принудительного порядка зон вкл: {{zone_order_enforced}}
                                      Последние зоны: {{ last_zones | list | length }} - {{last_zones}},
                                      Новые зоны: {{ after_zones | list | length }} - {{after_zones}},
                                      ТЕСТ: {{'ПРОШЕЛ' if zones_satisfied else 'НЕ ПРОШЕЛ' }} {{'(Мульти)' if zone_only and zone_multi}} {{'(Принудительный порядок)' if zone_only and zone_multi and zone_order_enforced}},
                                    Фильтр объектов:
                                      Ввод: {{input_labels}},
                                      ТЕСТ: {{'ПРОШЕЛ' if objects_satisfied else 'НЕ ПРОШЕЛ'}} - {{objects}},
                                    Сущность присутствия (не дома):
                                      Сущность: {{presence_entity}},
                                      ТЕСТ:  {{'ПРОШЕЛ' if not home else 'НЕ ПРОШЕЛ'}},
                                    Фильтр времени:
                                      Отключенные времена: {{disable_times}},
                                      ТЕСТ: {{'ПРОШЕЛ' if now().hour not in disable_times else 'НЕ ПРОШЕЛ'}}
                                    Фильтр состояний:
                                      Переключатель фильтра состояний вкл: {{state_only}},
                                      Сущность фильтра состояний: {{input_entity}},
                                      Требуемые состояния: {{input_states}},
                                      ТЕСТ: {{'ПРОШЕЛ' if state_satisfied else 'НЕ ПРОШЕЛ'}},
                                    Пользовательский фильтр: {{'ПРОШЕЛ' if custom_filter else 'НЕ ПРОШЕЛ'}},
                - choose:
                    - conditions:
                        - and:
                            - alias: Фильтр серьезности
                              condition: template
                              value_template: "{{severity_satisfied}}"
                            - alias: Фильтр объектов
                              condition: template
                              value_template: "{{ objects_satisfied }}"
                            - alias: Фильтр зон
                              condition: template
                              value_template: "{{zones_satisfied}}"
                            - alias: Фильтр состояний
                              condition: template
                              value_template: "{{state_satisfied}}"
                            - alias: Пользовательский фильтр
                              condition: template
                              value_template: "{{custom_filter}}"
                            - alias: Фильтр присутствия
                              condition: template
                              value_template: "{{not home}}"
                            - or:
                                - alias: Присутствие изменилось
                                  condition: template
                                  value_template: "{{presence_changed}}"
                                - alias: Зона изменилась
                                  condition: template
                                  value_template: "{{zone_updated}}"
                                - alias: Подметка изменилась
                                  condition: template
                                  value_template: "{{sub_label_updated}}"
                                - alias: Объект изменился
                                  condition: template
                                  value_template: "{{object_updated}}"
                                - alias: Серьезность изменилась
                                  condition: template
                                  value_template: "{{severity_updated}}"
                                - and:
                                    - alias: Финальное обновление
                                      condition: template
                                      value_template: "{{final_update}}"
                                    - alias: Конец события
                                      condition: template
                                      value_template: "{{event['type'] == 'end'}}"
                      sequence:
                        - alias: "Пользовательское действие авто мульти"
                          choose:
                            - conditions:
                                - "{{ custom_action_auto_multi | length > 0 }}"
                              sequence: !input "custom_action_auto_multi"
                        - alias: "Задержка для финального обновления"
                          choose:
                            - conditions:
                                - "{{ event['type'] == 'end' }}"
                                - "{{ final_update }}"
                              sequence:
                                - delay:
                                    seconds: "{{final_delay}}"
                        - alias: "Обновить уведомление"
                          sequence:
                            - choose:
                                - conditions: "{{ telegram }}"
                                  sequence:
                                    - choose:
                                        - conditions:
                                            - "{{ event['type'] == 'end' }}"
                                            - "{{ video | length > 0 }}"
                                          sequence:
                                            - action: telegram_bot.send_video
                                              data:
                                                target: "{{telegram_chat_id}}"
                                                caption: "{{message}}"
                                                url: "{{ video | replace(base_url, telegram_base_url) }}"
                                                inline_keyboard:
                                                  - [
                                                      [
                                                        "{{button_1}}",
                                                        "{{url_1}}",
                                                      ],
                                                      [
                                                        "{{button_2}}",
                                                        "{{url_2}}",
                                                      ],
                                                    ]
                                                  - [
                                                      [
                                                        "{{button_3}}",
                                                        "{{url_3}}",
                                                      ],
                                                    ]
                                      default:
                                        - action: telegram_bot.send_photo
                                          data:
                                            target: "{{telegram_chat_id}}"
                                            caption: "{{message}}"
                                            url: "{{attachment | replace(base_url,telegram_base_url)}}"
                                            inline_keyboard:
                                              - [
                                                  ["{{button_1}}", "{{url_1}}"],
                                                  ["{{button_2}}", "{{url_2}}"],
                                                ]
                                              - [["{{button_3}}", "{{url_3}}"]]
                                - conditions: "{{ not notify_group_target }}"
                                  sequence:
                                    - device_id: !input notify_device
                                      domain: mobile_app
                                      type: notify
                                      title: "{{title}}"
                                      message: "{{message}}"
                                      data:
                                        tag: "{{ tag }}"
                                        group: "{{ group }}"
                                        color: "{{color}}"
                                        # Android Specific
                                        subject: "{{subtitle}}"
                                        image: "{{attachment}}"
                                        video: "{{video}}"
                                        clickAction: "{{tap_action}}"
                                        ttl: 0
                                        priority: high
                                        alert_once: "{{ alert_once }}"
                                        notification_icon: "{{icon}}"
                                        sticky: "{{sticky}}"
                                        channel: "{{'alarm_stream' if critical else channel}}"
                                        car_ui: "{{android_auto}}"
                                        # iOS Specific
                                        subtitle: "{{subtitle}}"
                                        url: "{{tap_action}}"
                                        attachment:
                                          url: "{{video if video else attachment }}"
                                          content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                        push:
                                          sound:
                                            name: "{{ iif(silent_update, 'none', sound) }}"
                                            volume: "{{ iif((silent_update or sound == 'none'), 0, volume) }}"
                                          interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                        entity_id: "{{ios_live_view}}"
                                        # Actions
                                        actions:
                                          - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                            title: "{{button_1}}"
                                            uri: "{{url_1}}"
                                            icon: "{{icon_1}}"
                                            destructive: "{{not '/' in url_1}}"
                                          - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                            title: "{{button_2}}"
                                            uri: "{{url_2}}"
                                            icon: "{{icon_2}}"
                                            destructive: "{{not '/' in url_2}}"
                                          - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                            title: "{{button_3}}"
                                            uri: "{{url_3}}"
                                            icon: "{{icon_3}}"
                                            destructive: "{{not '/' in url_3}}"
                                - conditions: "{{ tv }}"
                                  sequence:
                                    - action: "notify.{{ notify_group_target }}"
                                      data:
                                        title: "{{title}}"
                                        message: "{{message}}"
                                        data:
                                          tag: "{{ tag }}"
                                          group: "{{ group }}"
                                          color: "{{color}}"
                                          # Android Specific
                                          subject: "{{subtitle}}"
                                          clickAction: "{{tap_action}}"
                                          ttl: 0
                                          priority: high
                                          alert_once: "{{ alert_once }}"
                                          notification_icon: "{{icon}}"
                                          sticky: "{{sticky}}"
                                          channel: "{{'alarm_stream' if critical else channel}}"
                                          car_ui: "{{android_auto}}"
                                          # Android/Fire TV
                                          image:
                                            url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                                          video: "{{video}}"
                                          fontsize: "{{tv_size}}"
                                          position: "{{tv_position}}"
                                          duration: "{{tv_duration}}"
                                          transparency: "{{tv_transparency}}"
                                          interrupt: "{{tv_interrupt}}"
                                          timeout: 30
                                          # iOS Specific
                                          subtitle: "{{subtitle}}"
                                          url: "{{tap_action}}"
                                          attachment:
                                            url: "{{video if video else attachment }}"
                                            content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                          push:
                                            sound:
                                              name: "{{ iif(silent_update, 'none', sound) }}"
                                              volume: "{{ iif((silent_update or sound == 'none'), 0, volume) }}"
                                            interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                          entity_id: "{{ios_live_view}}"
                                          # Actions
                                          actions:
                                            - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                              title: "{{button_1}}"
                                              uri: "{{url_1}}"
                                              icon: "{{icon_1}}"
                                              destructive: "{{not '/' in url_1}}"
                                            - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                              title: "{{button_2}}"
                                              uri: "{{url_2}}"
                                              icon: "{{icon_2}}"
                                              destructive: "{{not '/' in url_2}}"
                                            - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                              title: "{{button_3}}"
                                              uri: "{{url_3}}"
                                              icon: "{{icon_3}}"
                                              destructive: "{{not '/' in url_3}}"
                              default:
                                - action: "notify.{{ notify_group_target }}"
                                  data:
                                    title: "{{title}}"
                                    message: "{{message}}"
                                    data:
                                      tag: "{{ tag }}"
                                      group: "{{ group }}"
                                      color: "{{color}}"
                                      # Android Specific
                                      subject: "{{subtitle}}"
                                      image: "{{attachment}}"
                                      video: "{{video}}"
                                      clickAction: "{{tap_action}}"
                                      ttl: 0
                                      priority: high
                                      alert_once: "{{ alert_once }}"
                                      notification_icon: "{{icon}}"
                                      sticky: "{{sticky}}"
                                      channel: "{{'alarm_stream' if critical else channel}}"
                                      car_ui: "{{android_auto}}"
                                      # Android/Fire TV
                                      fontsize: "{{tv_size}}"
                                      position: "{{tv_position}}"
                                      duration: "{{tv_duration}}"
                                      transparency: "{{tv_transparency}}"
                                      interrupt: "{{tv_interrupt}}"
                                      # iOS Specific
                                      subtitle: "{{subtitle}}"
                                      url: "{{tap_action}}"
                                      attachment:
                                        url: "{{video if video else attachment }}"
                                        content-type: "{{ 'application/vnd.apple.mpegurl' if 'm3u8' in video else 'mp4' if 'mp4' in video else 'jpeg' if 'jpg' in attachment else 'gif' }}"
                                      push:
                                        sound:
                                          name: "{{ iif(silent_update, 'none', sound) }}"
                                          volume: "{{ iif((silent_update or sound == 'none'), 0, volume) }}"
                                        interruption-level: "{{ iif(critical, 1, interruption_level) }}"
                                      entity_id: "{{ios_live_view}}"
                                      # Actions
                                      actions:
                                        - action: "{{ 'URI' if '/' in url_1 else url_1 }}"
                                          title: "{{button_1}}"
                                          uri: "{{url_1}}"
                                          icon: "{{icon_1}}"
                                          destructive: "{{not '/' in url_1}}"
                                        - action: "{{ 'URI' if '/' in url_2 else url_2 }}"
                                          title: "{{button_2}}"
                                          uri: "{{url_2}}"
                                          icon: "{{icon_2}}"
                                          destructive: "{{not '/' in url_2}}"
                                        - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                          title: "{{button_3}}"
                                          uri: "{{url_3}}"
                                          icon: "{{icon_3}}"
                                          destructive: "{{not '/' in url_3}}"

                            - if: "{{tts and (not tts_helper or not alert_once or (tts_helper and id not in states(tts_helper)))}}"
                              then:
                                sequence:
                                  - choose:
                                      - conditions: "{{ not notify_group_target }}"
                                        sequence:
                                          - device_id: !input notify_device
                                            domain: mobile_app
                                            type: notify
                                            message: "{{'TTS'}}"
                                            data:
                                              tag: "{{ tag }}{{'-loitering-tts' if loitering}}"
                                              channel: "{{'alarm_stream' if critical else channel}}"
                                              alert_once: "{{ alert_once }}"
                                              tts_text: "{{message}}"

                                    default:
                                      - action: "notify.{{ notify_group_target }}"
                                        data:
                                          message: "{{'TTS'}}"
                                          data:
                                            tag: "{{ tag }}{{'-loitering-tts' if loitering}}"
                                            channel: "{{'alarm_stream' if critical else channel}}"
                                            alert_once: "{{ alert_once }}"
                                            tts_text: "{{message}}"
                                  - action: input_text.set_value
                                    data:
                                      value: |
                                        {% set newIds = id + '|' + states(tts_helper) %}
                                        {{ newIds[:250] }}
                                    target:
                                      entity_id: "{{tts_helper}}"
              until: "{{ not wait.trigger or wait.trigger.payload_json['type'] == 'end' }}"